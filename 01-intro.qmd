---
title: "Introduction to the shell command line"
author: "Clara JÃ©gousse"
---

# Introduction

::: {.callout-tip icon="false"}
## ðŸ¤” Questions

-   What **is** the shell?
-   How do you **access** the shell?
-   How do you **use** the shell?
:::

## What is the shell?

The shell is a command-line interface (CLI) program that allows users to interact with an operating system's services, applications, and utilities. The shell is an interface between the user and the kernel, which is the core of the operating system.

::: {.callout-note collapse="true"}
There are several different types of shells available, including the Bourne shell (sh), the Bourne-Again shell (**bash**), the C shell (csh), and the Korn shell (ksh). Each shell has its own set of features and syntax, but they all share the same basic functionality of providing a command-line interface for users to interact with an operating system.
:::

## How to access the shell

You access the shell using the "terminal". The terminal is a window into which we will type commands in. The terminal is already available on Mac and Linux. For windows you must download a separate program.

## Starting with the shell

We will spend most of our time learning about the basics of the shell by manipulating some experimental data from a hearing test.

### Making a new directory

First, we're going to create a new **directory** to work in using the command `mkdir` which stands for "**m**a**k**e **dir**ectory".

::: callout-note
The word "directory" a location for storing files on a computer and it is synonym to "folder".
:::

To create the directory, we must type the following command in the terminal and hit return to execute the command.

``` bash
mkdir training
```

### Listing and navigating

Now let's see if our new directory was created using the command `ls` that stands for "list" or "listing".

``` bash
ls
```

You should see your new directory called "training" in the list displayed in the terminal.

Now we're going to go into that directory using the command `cd` which stands for "**c**hange **d**irectory".

``` bash
cd training
```

Now let's look at see what's in here. There should be nothing right now, because we just made it, but let's check using the command `ls` again.

Now we are going to create a text file using the command `touch`

``` bash
touch file.txt
```

We can now check with if the file was created using the `ls` command again.

Now we're going to download the data for this tutorial. For this you'll need internet access, because you're going to get it off the web. Enter the command:

``` bash
git clone https://github.com/clarajegousse/training-data
```

This command will grab all of the data needed for this workshop from the internet.

Now let's check to see that we got the data.

``` bash
ls
```

In there, all mixed up together are files and directories/folders. If we want to know which is which, we can type: `ls -F`

``` bash
ls -F
```

Anything with a `/` after it is a directory. Things with a `*` after them are programs. If there's after the name, then it's a file.

You can also use the command `ls -l` to see whether items in a directory are files or directories. `ls -l` gives a lot more information too, such as the size of the file and [file permissions](https://en.wikipedia.org/wiki/File-system_permissions).

``` bash
ls -l
```

So, we can see that we have several files, directories and a program. Great!

## Arguments

Most commands offer additional arguments that control their exact behavior. For example, `-F` and `-l` are arguments to `ls`. The `ls` program, like many programs, take a lot of arguments. But how do we know what the options are to particular commands? We can consult the manual!

## Manuals

We can consult the manual using the following:

``` bash
man ls
```

To exit the manual, hit the `q` key to "**q**uit".

Every single command has its own manual. Earlier, we used the command `cd` and we can also consult the manual for `mkdir`:

``` bash
man mkdir
```

::: callout-tip
Programs that are run from the command line can be complex. To see an example, open up the manual page for the `find` program. No one can possibly learn all of these arguments, of course. So you will probably find yourself referring back to the manual page frequently.
:::
